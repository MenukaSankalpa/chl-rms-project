<?php

namespace App\Http\Controllers;

use App\Department;
use App\Vessel;
use Illuminate\Http\Request;
use App\Course;
use Yajra\DataTables\DataTables;

class VesselController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth:web,admin');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function index()
    {
        $this->authorize('view', Vessel::class);
        $vessels = Vessel::all();
        return view('vessel.index',compact('vessels'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function create()
    {
        $this->authorize('create', Vessel::class);
        return view('vessel.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function store(Request $request)
    {
        $this->authorize('create', Vessel::class);

        $vessel = new Vessel();

        $request->validate([
//            'code'=>'required|unique:vessels,code',
            'name'=>'required|unique:vessels,name',
        ]);

        $vessel->code = $request->code;
        $vessel->name = $request->name;
        $vessel->save();

        return redirect('/vessel')->with('success','Created Successfully');

    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function show($id)
    {
        $this->authorize('view', Vessel::class);
        $vessel = Vessel::find($id);
        return view('vessel.show', compact('vessel'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function edit($id)
    {
        $this->authorize('update', Vessel::class);
        $vessel = Vessel::find($id);
        return view('vessel.edit',compact('vessel'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function update(Request $request, $id)
    {
        $this->authorize('update', Vessel::class);
        $vessel = Vessel::find($id);

        $request->validate([
//            'code'=>'required|unique:vessels,code,'.$vessel->id,
            'name'=>'required|unique:vessels,name,'.$vessel->id,
        ]);

        $vessel->code = $request->code;
        $vessel->name = $request->name;
        $vessel->update();

        return redirect('/vessel')->with('success','Updated Successfully');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function destroy($id)
    {
        $this->authorize('delete', Vessel::class);
        $vessel = Vessel::find($id);
        $vessel->delete();
        return redirect('/vessel')->with('success','deleted Successfully');
    }

    /**
     * @param DataTables $datatables
     * @return mixed
     */
    public function data(DataTables $datatables)
    {
        return $datatables->eloquent(Vessel::query())
            ->editColumn('code', function ($vessel) {
                return '<a href="'.url('/vessel/'.$vessel->id).'">' . $vessel->code . '</a>';
            })
            ->addColumn('action',function ($vessel){
                return view('vessel.actions',compact('vessel'));
            })
            ->rawColumns(['code', 'action'])
            ->make(true);
    }

}

