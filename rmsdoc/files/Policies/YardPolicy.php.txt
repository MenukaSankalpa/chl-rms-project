<?php

namespace App\Policies;

use App\User;
use App\Yard;
use Illuminate\Auth\Access\HandlesAuthorization;

class YardPolicy
{
    use HandlesAuthorization;
    
    /**
     * Determine whether the user can view any yards.
     *
     * @param  \App\User  $user
     * @return mixed
     */
    public function viewAny(User $user)
    {
        //
        return $user->guard('web')->can('yard.show');

    }

    /**
     * Determine whether the user can view the yard.
     *
     * @param  \App\User  $user
     * @param  \App\Yard  $yard
     * @return mixed
     */
    public function view(User $user)
    {
        //
        return $user->guard(['web'])->can('yard.show');

    }

    /**
     * Determine whether the user can create yards.
     *
     * @param  \App\User  $user
     * @return mixed
     */
    public function create(User $user)
    {
        //
        return $user->guard(['web'])->can('yard.create');

    }

    /**
     * Determine whether the user can update the yard.
     *
     * @param  \App\User  $user
     * @param  \App\Yard  $yard
     * @return mixed
     */
    public function update(User $user)
    {
        //
        return $user->guard(['web'])->can('yard.update');

    }

    /**
     * Determine whether the user can delete the yard.
     *
     * @param  \App\User  $user
     * @param  \App\Yard  $yard
     * @return mixed
     */
    public function delete(User $user)
    {
        //
        return $user->guard(['web'])->can('yard.destroy');

    }

    /**
     * Determine whether the user can restore the yard.
     *
     * @param  \App\User  $user
     * @param  \App\Yard  $yard
     * @return mixed
     */
    public function restore(User $user, Yard $yard)
    {
        //
    }

    /**
     * Determine whether the user can permanently delete the yard.
     *
     * @param  \App\User  $user
     * @param  \App\Yard  $yard
     * @return mixed
     */
    public function forceDelete(User $user, Yard $yard)
    {
        //
    }
}

